{"name": "test_negative_search[\\U0001f600\\U0001f600\\U0001f600]", "status": "skipped", "statusDetails": {"message": "XFAIL\n\nselenium.common.exceptions.WebDriverException: Message: unknown error: ChromeDriver only supports characters in the BMP\n  (Session info: chrome=126.0.6478.127)\nStacktrace:\n\tGetHandleVerifier [0x0108C1C3+27395]\n\t(No symbol) [0x01023DC4]\n\t(No symbol) [0x00F21B7F]\n\t(No symbol) [0x00F96F4A]\n\t(No symbol) [0x00F5DA9D]\n\t(No symbol) [0x00F5C3B5]\n\t(No symbol) [0x00F8399C]\n\t(No symbol) [0x00F58C15]\n\t(No symbol) [0x00F83C34]\n\t(No symbol) [0x00F9CB24]\n\t(No symbol) [0x00F83736]\n\t(No symbol) [0x00F57541]\n\t(No symbol) [0x00F580BD]\n\tGetHandleVerifier [0x01343A93+2876371]\n\tGetHandleVerifier [0x01397F5D+3221661]\n\tGetHandleVerifier [0x0110D634+556916]\n\tGetHandleVerifier [0x0111474C+585868]\n\t(No symbol) [0x0102CE04]\n\t(No symbol) [0x01029818]\n\t(No symbol) [0x010299B7]\n\t(No symbol) [0x0101BF0E]\n\tBaseThreadInitThunk [0x76117BA9+25]\n\tRtlInitializeExceptionChain [0x76F8C10B+107]\n\tRtlClearBits [0x76F8C08F+191]", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a7e2c80509fed6d768cf2cd269b582ab\")>\nconfig = <configparser.ConfigParser object at 0x0000014B653762D0>, input = 'ðŸ˜€ðŸ˜€ðŸ˜€'\n\n    @pytest.mark.xfail()\n    @pytest.mark.parametrize('input',\n    ['$%^',\n     '',\n     'ðŸ˜€ðŸ˜€ðŸ˜€',\n     None]\n    )\n    def test_negative_search(browser, config, input):\n        search = SearchPage(browser, config)\n        search.go_to_page()\n>       search.search(input)\n\ntest\\test_search_page.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\SearchPage.py:15: in search\n    str.send_keys(input)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:231: in send_keys\n    self._execute(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000014B65780E30>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: ChromeDriver only supports chara...dInitThunk [0x76117BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x76F8C10B+107]\\\\n\\\\tRtlClearBits [0x76F8C08F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: ChromeDriver only supports characters in the BMP\nE         (Session info: chrome=126.0.6478.127)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0108C1C3+27395]\nE       \t(No symbol) [0x01023DC4]\nE       \t(No symbol) [0x00F21B7F]\nE       \t(No symbol) [0x00F96F4A]\nE       \t(No symbol) [0x00F5DA9D]\nE       \t(No symbol) [0x00F5C3B5]\nE       \t(No symbol) [0x00F8399C]\nE       \t(No symbol) [0x00F58C15]\nE       \t(No symbol) [0x00F83C34]\nE       \t(No symbol) [0x00F9CB24]\nE       \t(No symbol) [0x00F83736]\nE       \t(No symbol) [0x00F57541]\nE       \t(No symbol) [0x00F580BD]\nE       \tGetHandleVerifier [0x01343A93+2876371]\nE       \tGetHandleVerifier [0x01397F5D+3221661]\nE       \tGetHandleVerifier [0x0110D634+556916]\nE       \tGetHandleVerifier [0x0111474C+585868]\nE       \t(No symbol) [0x0102CE04]\nE       \t(No symbol) [0x01029818]\nE       \t(No symbol) [0x010299B7]\nE       \t(No symbol) [0x0101BF0E]\nE       \tBaseThreadInitThunk [0x76117BA9+25]\nE       \tRtlInitializeExceptionChain [0x76F8C10B+107]\nE       \tRtlClearBits [0x76F8C08F+191]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "parameters": [{"name": "input", "value": "'ðŸ˜€ðŸ˜€ðŸ˜€'"}], "start": 1720748079973, "stop": 1720748093263, "uuid": "c72dff1d-73ab-4a15-83dd-cdaa9e42364a", "historyId": "ee009d3329f1f5d6291299d850da4c15", "testCaseId": "b715c353c83498591e60c50d3d8f7193", "fullName": "test.test_search_page#test_negative_search", "labels": [{"name": "tag", "value": "@pytest.mark.xfail"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_search_page"}, {"name": "host", "value": "LindSY"}, {"name": "thread", "value": "8100-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_search_page"}]}